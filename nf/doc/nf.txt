/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2013 William Hart

******************************************************************************/

*******************************************************************************

    Initialisation

*******************************************************************************

void nf_init(nf_t nf, fmpq_poly_t pol)

    Perform basic initialisation of a number field (for element arithmetic)
    given a defining polynomial over $\Q$. 

void nf_clear(nf_t nf)

    Release resources used by a number field object. The object will need
    initialisation again before it can be used.

*******************************************************************************

    Roots

*******************************************************************************

void _nf_compute_roots(acb_ptr roots, const fmpz_poly_t poly,
        slong initial_prec, slong target_prec)

    Given a squarefree polynomial, computes numerical approximations of
    all its complex roots with error at most $2^{-\text{target_prec}}$.
    The precision is repeatedly doubled until convergence, starting
    with initial_prec bits.

void nf_compute_roots(nf_t nf, slong prec)

    Refines the roots of the number field to error at most $2^{-\text{prec}}$.

