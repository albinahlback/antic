/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2013 William Hart

******************************************************************************/

*******************************************************************************

    Initialisation

*******************************************************************************

void nf_elem_init(nf_elem_t a, nf_t nf)

    Initialise a number field element to belong to the given number field
    \code{nf}.

void nf_elem_clear(nf_elem_t a, nf_t nf)

    Clear resources allocated by the given number field element in the given
    number field.

void nf_elem_randtest(nf_elem_t a, flint_rand_t state, 
                                                     mp_bitcnt_t bits, nf_t nf)

    Generate a random number field element $a$ in the number field \code{nf}
    whose coefficients have up to the given number of bits.

*******************************************************************************

    Comparison

*******************************************************************************

int nf_elem_equal(nf_elem_t a, nf_elem_t b, nf_t nf)

    Return $1$ if the given number field elements are equal in the given
    number field \code{nf}.

*******************************************************************************

    I/O

*******************************************************************************

void nf_elem_print(nf_elem_t a, nf_t nf)

    Print the given number field element.

*******************************************************************************

    Arithmetic

*******************************************************************************

void nf_elem_zero(nf_elem_t a)

   Set the given number field element to zero.

void nf_elem_set(nf_elem_t a, nf_elem_t b, nf_t nf)

    Set the number field element $a$ to equal the number field element $b$,
    i.e. set $a = b$.

void nf_elem_add(nf_elem_t r, nf_elem_t a, nf_elem_t b, nf_t nf)

    Add two elements of a number field \code{nf}, i.e. set $r = a + b$.

void nf_elem_sub(nf_elem_t r, nf_elem_t a, nf_elem_t b, nf_t nf)

    Subtract two elements of a number field \code{nf}, i.e. set $r = a - b$.

void nf_elem_mul(nf_elem_t r, nf_elem_t a, nf_elem_t b, nf_t nf)

    Multiply two elements of a number field \code{nf}, i.e. set $r = a * b$.

void nf_elem_inv(nf_elem_t r, nf_elem_t a, nf_t nf)

    Invert an element of a number field \code{nf}, i.e. set $r = a^{-1}$.